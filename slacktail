#!/usr/bin/env python

from __future__ import print_function

import argparse
import requests
import atexit
import time
import sys
import os
import re


class Tail:

    def __init__(self, filename, sleep=60):
        """ open a file and seek to the end """
        self.f = open(filename, 'r')
        self.f.seek(0, os.SEEK_END)
        self.sleep = sleep

    def getlines(self):
        """ wait until one or more new lines are added to the file, and return them """
        while True:
            lines = self.f.readlines()
            self.f.seek(0, os.SEEK_CUR)  # reset EOF flag by seeking to current pos
            if lines != []:  # not EOF
                return lines
            time.sleep(self.sleep)


class Slack:

    def __init__(self, webhook, proxy=None, channel=None, timeout=5):
        self.url = webhook
        self.proxy = proxy
        self.timeout = timeout
        self.channel = channel

    def send(self, lines):
        """ Send line to Slack """
        headers = {'Content-Type': 'application/json'}
        payload = {'text': '```{}```'.format(lines)}
        if self.channel:
            payload['channel'] = self.channel
        if self.proxy:
            proxies = {'https': self.proxy}
        else:
            proxies = None
        r = requests.post(self.url, json=payload, headers=headers, proxies=proxies, timeout=self.timeout)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Tail a file, optionaly filter, and output to Slack')

    parser.add_argument('--url',
                        '-u',
                        metavar='URL',
                        help='The Slack webhook URL',
                        required=True)
    parser.add_argument('--proxy',
                        '-p',
                        metavar='URL',
                        help='Optional HTTPS or SOCKS proxy to use')
    parser.add_argument('--channel',
                        '-c',
                        metavar='NAME',
                        help='Override configured channel. NAME can be a #channel or a @user.')
    parser.add_argument('--file',
                        '-f',
                        metavar='NAME',
                        help='The file to tail',
                        required=True)
    parser.add_argument('--wait',
                        '-w',
                        metavar='SEC',
                        type=int,
                        help='Try to read new lines every SEC seconds (default: 60)',
                        default=60)
    parser.add_argument('--match',
                        '-m',
                        metavar='REGEXP',
                        help='Only output new lines when REGEXP matches')
    parser.add_argument('--imatch',
                        '-i',
                        metavar='REGEXP',
                        help='Output all new lines except the ones which match REGEXP',
                        default=False)
    parser.add_argument('--exit-match',
                        '-e',
                        metavar='REGEXP',
                        help='Stop tailing the file when a new line matches REGEXP')
    parser.add_argument('--truncate',
                        '-t',
                        metavar='SIZE',
                        type=int,
                        help='Limit the size of every message to SIZE bytes. The oldest lines will be removed first. (default: 4096)',
                        default=4096)
    parser.add_argument('--verbose',
                        '-v',
                        action='store_true',
                        help='Also output on stdout',
                        default=False)

    args = parser.parse_args()

    if args.match and args.imatch:
        print('--match and --imatch are mutually exclusive', file=sys.stderr)
        sys.exit(1)

    try:
        tail = Tail(filename=args.file, sleep=args.wait)
    except:
        print("Can't open {}: {}".format(args.file, sys.exc_info()[1]), file=sys.stderr)
        sys.exit(1)

    slack = Slack(webhook=args.url, channel=args.channel, proxy=args.proxy)
    try:
        slack.send('Tailing {} every {} seconds. Max size {} bytes'.format(args.file, args.wait, args.truncate))
    except:
        print("Error connecting to the Slack API: {}".format(sys.exc_info()[1]), file=sys.stderr)
        sys.exit(1)

    atexit.register(slack.send, 'Bye')

    do_loop = True

    while do_loop:
        outlines = []
        lines = tail.getlines()

        for line in lines:
            if args.match:
                if re.search(args.match, line):
                    outlines.append(line)
            elif args.imatch:
                if not re.search(args.imatch, line):
                    outlines.append(line)
            else:
                outlines.append(line)

            if args.exit_match and re.search(args.exit_match, line):
                outlines.append('Exit because of /{}/ match:\n{}'.format(args.exit_match, line))
                do_loop = False
                break

        if outlines:
            outstr = ''.join(outlines)
            if len(outstr) > args.truncate:
                outstr = '.....' + outstr[-args.truncate:]
            if args.verbose:
                print(outstr, end='')
            try:
                slack.send(outstr)
            except:
                print("Error connecting to the Slack API: {}".format(sys.exc_info()[1]), file=sys.stderr)
